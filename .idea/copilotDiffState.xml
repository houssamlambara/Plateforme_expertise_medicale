<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;&#10;    &lt;groupId&gt;org.Platform_expertise_medicle&lt;/groupId&gt;&#10;    &lt;artifactId&gt;Platform_expertise_medicale&lt;/artifactId&gt;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#10;    &lt;name&gt;Platform_expertise_medicle&lt;/name&gt;&#10;    &lt;packaging&gt;war&lt;/packaging&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#10;        &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;&#10;        &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;&#10;        &lt;junit.version&gt;5.13.2&lt;/junit.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;jakarta.servlet&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jakarta.servlet-api&lt;/artifactId&gt;&#10;            &lt;version&gt;6.0.0&lt;/version&gt;&#10;            &lt;scope&gt;provided&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;jakarta.servlet.jsp.jstl&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jakarta.servlet.jsp.jstl-api&lt;/artifactId&gt;&#10;            &lt;version&gt;3.0.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jakarta.servlet.jsp.jstl&lt;/artifactId&gt;&#10;            &lt;version&gt;3.0.1&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;jakarta.persistence&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jakarta.persistence-api&lt;/artifactId&gt;&#10;            &lt;version&gt;3.1.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.hibernate.orm&lt;/groupId&gt;&#10;            &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;&#10;            &lt;version&gt;6.4.4.Final&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;com.mysql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;&#10;            &lt;version&gt;8.3.0&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- BCrypt pour le hachage des mots de passe --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.mindrot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jbcrypt&lt;/artifactId&gt;&#10;            &lt;version&gt;0.4&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#10;                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;3.4.0&lt;/version&gt;&#10;            &lt;/plugin&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;&#10;                &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;2.2&lt;/version&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;port&gt;8080&lt;/port&gt;&#10;                    &lt;path&gt;/&lt;/path&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#13;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#13;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#13;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#13;&#10;&#13;&#10;    &lt;groupId&gt;org.Platform_expertise_medicle&lt;/groupId&gt;&#13;&#10;    &lt;artifactId&gt;Platform_expertise_medicale&lt;/artifactId&gt;&#13;&#10;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;&#13;&#10;    &lt;name&gt;Platform_expertise_medicle&lt;/name&gt;&#13;&#10;    &lt;packaging&gt;war&lt;/packaging&gt;&#13;&#10;&#13;&#10;    &lt;properties&gt;&#13;&#10;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;&#13;&#10;        &lt;maven.compiler.target&gt;17&lt;/maven.compiler.target&gt;&#13;&#10;        &lt;maven.compiler.source&gt;17&lt;/maven.compiler.source&gt;&#13;&#10;        &lt;junit.version&gt;5.13.2&lt;/junit.version&gt;&#13;&#10;    &lt;/properties&gt;&#13;&#10;&#13;&#10;    &lt;dependencies&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;jakarta.servlet&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;jakarta.servlet-api&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;6.0.0&lt;/version&gt;&#13;&#10;            &lt;scope&gt;provided&lt;/scope&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;jakarta.servlet.jsp.jstl&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;jakarta.servlet.jsp.jstl-api&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;3.0.0&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;org.glassfish.web&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;jakarta.servlet.jsp.jstl&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;3.0.1&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;jakarta.persistence&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;jakarta.persistence-api&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;3.1.0&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;org.hibernate.orm&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;hibernate-core&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;6.4.4.Final&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;com.mysql&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;8.3.0&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;&#13;&#10;        &lt;!-- BCrypt pour le hachage des mots de passe --&gt;&#13;&#10;        &lt;dependency&gt;&#13;&#10;            &lt;groupId&gt;org.mindrot&lt;/groupId&gt;&#13;&#10;            &lt;artifactId&gt;jbcrypt&lt;/artifactId&gt;&#13;&#10;            &lt;version&gt;0.4&lt;/version&gt;&#13;&#10;        &lt;/dependency&gt;&#13;&#10;    &lt;/dependencies&gt;&#13;&#10;&#13;&#10;    &lt;build&gt;&#13;&#10;        &lt;plugins&gt;&#13;&#10;            &lt;plugin&gt;&#13;&#10;                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;&#13;&#10;                &lt;artifactId&gt;maven-war-plugin&lt;/artifactId&gt;&#13;&#10;                &lt;version&gt;3.4.0&lt;/version&gt;&#13;&#10;            &lt;/plugin&gt;&#13;&#10;            &lt;plugin&gt;&#13;&#10;                &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;&#13;&#10;                &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;&#13;&#10;                &lt;version&gt;2.2&lt;/version&gt;&#13;&#10;                &lt;configuration&gt;&#13;&#10;                    &lt;port&gt;8080&lt;/port&gt;&#13;&#10;                    &lt;path&gt;/&lt;/path&gt;&#13;&#10;                &lt;/configuration&gt;&#13;&#10;            &lt;/plugin&gt;&#13;&#10;        &lt;/plugins&gt;&#13;&#10;    &lt;/build&gt;&#13;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/platform_expertise_medicle/DAO/UserDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/platform_expertise_medicle/DAO/UserDAO.java" />
              <option name="originalContent" value="package org.platform_expertise_medicle.DAO;&#10;&#10;import jakarta.persistence.EntityManager;&#10;import jakarta.persistence.NoResultException;&#10;import jakarta.persistence.TypedQuery;&#10;import org.platform_expertise_medicle.model.MedecinGeneraliste;&#10;import org.platform_expertise_medicle.model.User;&#10;import org.platform_expertise_medicle.util.JpaUtil;&#10;import org.platform_expertise_medicle.util.PasswordUtil;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class UserDAO {&#10;&#10;    public User save(User user) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            em.getTransaction().begin();&#10;            // Hacher le mot de passe avant de sauvegarder (seulement si ce n'est pas déjà haché)&#10;            if (user.getMotDePasse() != null &amp;&amp; !user.getMotDePasse().startsWith(&quot;$2a$&quot;)) {&#10;                user.setMotDePasse(PasswordUtil.hashPassword(user.getMotDePasse()));&#10;            }&#10;            if (user.getId() == 0) {&#10;                em.persist(user);&#10;            } else {&#10;                user = em.merge(user);&#10;            }&#10;            em.getTransaction().commit();&#10;            return user;&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public Optional&lt;User&gt; findById(Long id) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            User user = em.find(User.class, id);&#10;            return Optional.ofNullable(user);&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public Optional&lt;User&gt; findByEmail(String email) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            User user = em.createQuery(&quot;SELECT u FROM User u WHERE u.email = :email&quot;, User.class)&#10;                    .setParameter(&quot;email&quot;, email)&#10;                    .getSingleResult();&#10;            return Optional.of(user);&#10;        } catch (NoResultException e) {&#10;            return Optional.empty();&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public List&lt;User&gt; findAll() {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            return em.createQuery(&quot;SELECT u FROM User u&quot;, User.class).getResultList();&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public void delete(Long id) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            em.getTransaction().begin();&#10;            User user = em.find(User.class, id);&#10;            if (user != null) {&#10;                em.remove(user);&#10;            }&#10;            em.getTransaction().commit();&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public Optional&lt;MedecinGeneraliste&gt; findMedecinGeneralisteById(Long id) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            TypedQuery&lt;MedecinGeneraliste&gt; query = em.createQuery(&#10;                    &quot;SELECT m FROM MedecinGeneraliste m WHERE m.id = :id&quot;, MedecinGeneraliste.class);&#10;            query.setParameter(&quot;id&quot;, id);&#10;            MedecinGeneraliste medecin = query.getSingleResult();&#10;            return Optional.ofNullable(medecin);&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            return Optional.empty();&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public boolean authenticate(String email, String password) {&#10;        Optional&lt;User&gt; userOpt = findByEmail(email);&#10;        if (userOpt.isPresent()) {&#10;            User user = userOpt.get();&#10;            // Utiliser BCrypt pour vérifier le mot de passe&#10;            return PasswordUtil.checkPassword(password, user.getMotDePasse());&#10;        }&#10;        return false;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.platform_expertise_medicle.DAO;&#10;&#10;import jakarta.persistence.EntityManager;&#10;import jakarta.persistence.NoResultException;&#10;import jakarta.persistence.TypedQuery;&#10;import org.platform_expertise_medicle.model.MedecinGeneraliste;&#10;import org.platform_expertise_medicle.model.User;&#10;import org.platform_expertise_medicle.util.JpaUtil;&#10;import org.platform_expertise_medicle.util.PasswordUtil;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public class UserDAO {&#10;&#10;    public User save(User user) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            em.getTransaction().begin();&#10;            // Hacher le mot de passe avant de sauvegarder (seulement si ce n'est pas déjà haché)&#10;            if (user.getMotDePasse() != null &amp;&amp; !user.getMotDePasse().startsWith(&quot;$2a$&quot;)) {&#10;                user.setMotDePasse(PasswordUtil.hashPassword(user.getMotDePasse()));&#10;            }&#10;            if (user.getId() == 0) {&#10;                em.persist(user);&#10;            } else {&#10;                user = em.merge(user);&#10;            }&#10;            em.getTransaction().commit();&#10;            return user;&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public Optional&lt;User&gt; findById(Long id) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            User user = em.find(User.class, id);&#10;            return Optional.ofNullable(user);&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public Optional&lt;User&gt; findByEmail(String email) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            User user = em.createQuery(&quot;SELECT u FROM User u WHERE u.email = :email&quot;, User.class)&#10;                    .setParameter(&quot;email&quot;, email)&#10;                    .getSingleResult();&#10;            return Optional.of(user);&#10;        } catch (NoResultException e) {&#10;            return Optional.empty();&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public List&lt;User&gt; findAll() {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            return em.createQuery(&quot;SELECT u FROM User u&quot;, User.class).getResultList();&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public void delete(Long id) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            em.getTransaction().begin();&#10;            User user = em.find(User.class, id);&#10;            if (user != null) {&#10;                em.remove(user);&#10;            }&#10;            em.getTransaction().commit();&#10;        } catch (Exception e) {&#10;            if (em.getTransaction().isActive()) {&#10;                em.getTransaction().rollback();&#10;            }&#10;            throw e;&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public Optional&lt;MedecinGeneraliste&gt; findMedecinGeneralisteById(Long id) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            TypedQuery&lt;MedecinGeneraliste&gt; query = em.createQuery(&#10;                    &quot;SELECT m FROM MedecinGeneraliste m WHERE m.id = :id&quot;, MedecinGeneraliste.class);&#10;            query.setParameter(&quot;id&quot;, id);&#10;            MedecinGeneraliste medecin = query.getSingleResult();&#10;            return Optional.ofNullable(medecin);&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            return Optional.empty();&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public boolean authenticate(String email, String password) {&#10;        Optional&lt;User&gt; userOpt = findByEmail(email);&#10;        if (userOpt.isPresent()) {&#10;            User user = userOpt.get();&#10;            // Utiliser BCrypt pour vérifier le mot de passe&#10;            return PasswordUtil.checkPassword(password, user.getMotDePasse());&#10;        }&#10;        return false;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/platform_expertise_medicle/model/Consultation.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/platform_expertise_medicle/model/Consultation.java" />
              <option name="originalContent" value="package org.platform_expertise_medicle.model;&#10;&#10;import jakarta.persistence.*;&#10;import org.platform_expertise_medicle.enums.StatutConsultation;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;consultations&quot;)&#10;public class Consultation {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private long id;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;patient_id&quot;, nullable = false)&#10;    private Patient patient;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;generaliste_id&quot;)&#10;    private MedecinGeneraliste generaliste;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;specialiste_id&quot;)&#10;    private MedecinSpecialiste medecinSpecialiste;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String symptomes;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String diagnostic;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String prescription;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String motif;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String observations;&#10;&#10;    @Column(nullable = false)&#10;    private String priorite = &quot;Normale&quot;;&#10;&#10;    private LocalDateTime dateConsultation;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private StatutConsultation statut;&#10;&#10;    @OneToMany(mappedBy = &quot;consultation&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)&#10;    private List&lt;ActeTechnique&gt; actesTechniques = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;consultation&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;DemandeExpertise&gt; demandesExpertise = new ArrayList&lt;&gt;();&#10;&#10;    public Consultation() {&#10;        this.dateConsultation = LocalDateTime.now();&#10;        this.statut = StatutConsultation.EN_COURS;&#10;    }&#10;&#10;    public long getId() { return id; }&#10;    public void setId(long id) { this.id = id; }&#10;&#10;    public Patient getPatient() { return patient; }&#10;    public void setPatient(Patient patient) { this.patient = patient; }&#10;&#10;    public MedecinGeneraliste getGeneraliste() { return generaliste; }&#10;    public void setGeneraliste(MedecinGeneraliste generaliste) { this.generaliste = generaliste; }&#10;&#10;    public MedecinSpecialiste getMedecinSpecialiste() { return medecinSpecialiste; }&#10;    public void setMedecinSpecialiste(MedecinSpecialiste medecinSpecialiste) { this.medecinSpecialiste = medecinSpecialiste; }&#10;&#10;    public String getSymptomes() { return symptomes; }&#10;    public void setSymptomes(String symptomes) { this.symptomes = symptomes; }&#10;&#10;    public String getDiagnostic() { return diagnostic; }&#10;    public void setDiagnostic(String diagnostic) { this.diagnostic = diagnostic; }&#10;&#10;    public String getPrescription() { return prescription; }&#10;    public void setPrescription(String prescription) { this.prescription = prescription; }&#10;&#10;    public String getMotif() { return motif; }&#10;    public void setMotif(String motif) { this.motif = motif; }&#10;&#10;    public String getObservations() { return observations; }&#10;    public void setObservations(String observations) { this.observations = observations; }&#10;&#10;    public LocalDateTime getDateConsultation() { return dateConsultation; }&#10;    public void setDateConsultation(LocalDateTime dateConsultation) { this.dateConsultation = dateConsultation; }&#10;&#10;    public StatutConsultation getStatut() {&#10;        return statut;&#10;    }&#10;&#10;    public void setStatut(StatutConsultation statut) {&#10;        this.statut = statut;&#10;    }&#10;&#10;    public List&lt;ActeTechnique&gt; getActesTechniques() { return actesTechniques; }&#10;&#10;    public void setActesTechniques(List&lt;ActeTechnique&gt; actesTechniques) {&#10;        this.actesTechniques.clear();&#10;        if (actesTechniques != null) {&#10;            actesTechniques.forEach(this::addActeTechnique);&#10;        }&#10;    }&#10;&#10;    public void addActeTechnique(ActeTechnique acte) {&#10;        actesTechniques.add(acte);&#10;        acte.setConsultation(this);&#10;    }&#10;&#10;    public void removeActeTechnique(ActeTechnique acte) {&#10;        actesTechniques.remove(acte);&#10;        acte.setConsultation(null);&#10;    }&#10;&#10;    public String getPriorite() {&#10;        return priorite;&#10;    }&#10;&#10;    public void setPriorite(String priorite) {&#10;        this.priorite = priorite;&#10;    }&#10;&#10;    public List&lt;DemandeExpertise&gt; getDemandesExpertise() {&#10;        return demandesExpertise;&#10;    }&#10;&#10;    public void setDemandesExpertise(List&lt;DemandeExpertise&gt; demandesExpertise) {&#10;        this.demandesExpertise = demandesExpertise;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.platform_expertise_medicle.model;&#10;&#10;import jakarta.persistence.*;&#10;import org.platform_expertise_medicle.enums.StatutConsultation;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;consultations&quot;)&#10;public class Consultation {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private long id;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;patient_id&quot;, nullable = false)&#10;    private Patient patient;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;generaliste_id&quot;)&#10;    private MedecinGeneraliste generaliste;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;specialiste_id&quot;)&#10;    private MedecinSpecialiste medecinSpecialiste;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String symptomes;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String diagnostic;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String prescription;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String motif;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String observations;&#10;&#10;    @Column(nullable = false)&#10;    private String priorite = &quot;Normale&quot;;&#10;&#10;    private LocalDateTime dateConsultation;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private StatutConsultation statut;&#10;&#10;    @OneToMany(mappedBy = &quot;consultation&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)&#10;    private List&lt;ActeTechnique&gt; actesTechniques = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;consultation&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;DemandeExpertise&gt; demandesExpertise = new ArrayList&lt;&gt;();&#10;&#10;    public Consultation() {&#10;        this.dateConsultation = LocalDateTime.now();&#10;        this.statut = StatutConsultation.EN_COURS;&#10;    }&#10;&#10;    public long getId() { return id; }&#10;    public void setId(long id) { this.id = id; }&#10;&#10;    public Patient getPatient() { return patient; }&#10;    public void setPatient(Patient patient) { this.patient = patient; }&#10;&#10;    public MedecinGeneraliste getGeneraliste() { return generaliste; }&#10;    public void setGeneraliste(MedecinGeneraliste generaliste) { this.generaliste = generaliste; }&#10;&#10;    public MedecinSpecialiste getMedecinSpecialiste() { return medecinSpecialiste; }&#10;    public void setMedecinSpecialiste(MedecinSpecialiste medecinSpecialiste) { this.medecinSpecialiste = medecinSpecialiste; }&#10;&#10;    public String getSymptomes() { return symptomes; }&#10;    public void setSymptomes(String symptomes) { this.symptomes = symptomes; }&#10;&#10;    public String getDiagnostic() { return diagnostic; }&#10;    public void setDiagnostic(String diagnostic) { this.diagnostic = diagnostic; }&#10;&#10;    public String getPrescription() { return prescription; }&#10;    public void setPrescription(String prescription) { this.prescription = prescription; }&#10;&#10;    public String getMotif() { return motif; }&#10;    public void setMotif(String motif) { this.motif = motif; }&#10;&#10;    public String getObservations() { return observations; }&#10;    public void setObservations(String observations) { this.observations = observations; }&#10;&#10;    public LocalDateTime getDateConsultation() { return dateConsultation; }&#10;    public void setDateConsultation(LocalDateTime dateConsultation) { this.dateConsultation = dateConsultation; }&#10;&#10;    public StatutConsultation getStatut() {&#10;        return statut;&#10;    }&#10;&#10;    public void setStatut(StatutConsultation statut) {&#10;        this.statut = statut;&#10;    }&#10;&#10;    public List&lt;ActeTechnique&gt; getActesTechniques() { return actesTechniques; }&#10;&#10;    public void setActesTechniques(List&lt;ActeTechnique&gt; actesTechniques) {&#10;        this.actesTechniques.clear();&#10;        if (actesTechniques != null) {&#10;            actesTechniques.forEach(this::addActeTechnique);&#10;        }&#10;    }&#10;&#10;    public void addActeTechnique(ActeTechnique acte) {&#10;        actesTechniques.add(acte);&#10;        acte.setConsultation(this);&#10;    }&#10;&#10;    public void removeActeTechnique(ActeTechnique acte) {&#10;        actesTechniques.remove(acte);&#10;        acte.setConsultation(null);&#10;    }&#10;&#10;    public String getPriorite() {&#10;        return priorite;&#10;    }&#10;&#10;    public void setPriorite(String priorite) {&#10;        this.priorite = priorite;&#10;    }&#10;&#10;    public List&lt;DemandeExpertise&gt; getDemandesExpertise() {&#10;        return demandesExpertise;&#10;    }&#10;&#10;    public void setDemandesExpertise(List&lt;DemandeExpertise&gt; demandesExpertise) {&#10;        this.demandesExpertise = demandesExpertise;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>