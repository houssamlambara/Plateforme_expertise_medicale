<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/org/platform_expertise_medicle/DAO/DemandeExpertiseDAO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/platform_expertise_medicle/DAO/DemandeExpertiseDAO.java" />
              <option name="originalContent" value="package org.platform_expertise_medicle.DAO;&#10;&#10;import jakarta.persistence.EntityManager;&#10;import jakarta.persistence.EntityTransaction;&#10;import jakarta.persistence.TypedQuery;&#10;import org.platform_expertise_medicle.enums.StatutConsultation;&#10;import org.platform_expertise_medicle.model.Consultation;&#10;import org.platform_expertise_medicle.model.DemandeExpertise;&#10;import org.platform_expertise_medicle.model.MedecinSpecialiste;&#10;import org.platform_expertise_medicle.util.JpaUtil;&#10;&#10;import java.util.List;&#10;&#10;public class DemandeExpertiseDAO {&#10;&#10;    //  Trouver un spécialiste par email&#10;    public MedecinSpecialiste findSpecialisteByEmail(String email) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            TypedQuery&lt;MedecinSpecialiste&gt; query = em.createQuery(&#10;                    &quot;SELECT m FROM MedecinSpecialiste m WHERE m.email = :email&quot;,&#10;                    MedecinSpecialiste.class&#10;            );&#10;            query.setParameter(&quot;email&quot;, email);&#10;            return query.getSingleResult();&#10;        } catch (Exception e) {&#10;            return null;&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    //  Trouver un spécialiste par ID&#10;    public MedecinSpecialiste findSpecialisteById(long id) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            return em.find(MedecinSpecialiste.class, id);&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public List&lt;Consultation&gt; findEnAttenteBySpecialisteId(long specialisteId) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            TypedQuery&lt;Consultation&gt; query = em.createQuery(&#10;                    &quot;SELECT DISTINCT c FROM Consultation c JOIN c.demandesExpertise d WHERE d.specialiste.id = :specId AND c.statut = :statut&quot;,&#10;                    Consultation.class&#10;            );&#10;            query.setParameter(&quot;specId&quot;, specialisteId);&#10;            query.setParameter(&quot;statut&quot;, StatutConsultation.EN_ATTENTE_AVIS_SPECIALISTE);&#10;            return query.getResultList();&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    //  Sauvegarder une demande&#10;    public void save(DemandeExpertise demande) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        EntityTransaction tx = em.getTransaction();&#10;        try {&#10;            tx.begin();&#10;            em.persist(demande);&#10;            tx.commit();&#10;            System.out.println(&quot;DemandeExpertise persistée en base pour le spécialiste ID=&quot; +&#10;                    (demande.getSpecialiste() != null ? demande.getSpecialiste().getId() : &quot;NULL&quot;));&#10;        } catch (Exception e) {&#10;            if (tx.isActive()) tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package org.platform_expertise_medicle.DAO;&#10;&#10;import jakarta.persistence.EntityManager;&#10;import jakarta.persistence.EntityTransaction;&#10;import jakarta.persistence.TypedQuery;&#10;import org.platform_expertise_medicle.enums.StatutConsultation;&#10;import org.platform_expertise_medicle.model.Consultation;&#10;import org.platform_expertise_medicle.model.DemandeExpertise;&#10;import org.platform_expertise_medicle.model.MedecinSpecialiste;&#10;import org.platform_expertise_medicle.util.JpaUtil;&#10;&#10;import java.util.List;&#10;&#10;public class DemandeExpertiseDAO {&#10;&#10;    //  Trouver un spécialiste par email&#10;    public MedecinSpecialiste findSpecialisteByEmail(String email) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            TypedQuery&lt;MedecinSpecialiste&gt; query = em.createQuery(&#10;                    &quot;SELECT m FROM MedecinSpecialiste m WHERE m.email = :email&quot;,&#10;                    MedecinSpecialiste.class&#10;            );&#10;            query.setParameter(&quot;email&quot;, email);&#10;            return query.getSingleResult();&#10;        } catch (Exception e) {&#10;            return null;&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    //  Trouver un spécialiste par ID&#10;    public MedecinSpecialiste findSpecialisteById(long id) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            return em.find(MedecinSpecialiste.class, id);&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    public List&lt;Consultation&gt; findEnAttenteBySpecialisteId(long specialisteId) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        try {&#10;            TypedQuery&lt;Consultation&gt; query = em.createQuery(&#10;                    &quot;SELECT DISTINCT c FROM Consultation c JOIN c.demandesExpertise d WHERE d.specialiste.id = :specId AND c.statut = :statut&quot;,&#10;                    Consultation.class&#10;            );&#10;            query.setParameter(&quot;specId&quot;, specialisteId);&#10;            query.setParameter(&quot;statut&quot;, StatutConsultation.EN_ATTENTE_AVIS_SPECIALISTE);&#10;            return query.getResultList();&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;&#10;    //  Sauvegarder une demande&#10;    public void save(DemandeExpertise demande) {&#10;        EntityManager em = JpaUtil.getEntityManagerFactory().createEntityManager();&#10;        EntityTransaction tx = em.getTransaction();&#10;        try {&#10;            tx.begin();&#10;            em.persist(demande);&#10;            tx.commit();&#10;            System.out.println(&quot;DemandeExpertise persistée en base pour le spécialiste ID=&quot; +&#10;                    (demande.getSpecialiste() != null ? demande.getSpecialiste().getId() : &quot;NULL&quot;));&#10;        } catch (Exception e) {&#10;            if (tx.isActive()) tx.rollback();&#10;            e.printStackTrace();&#10;        } finally {&#10;            em.close();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/org/platform_expertise_medicle/model/Consultation.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/org/platform_expertise_medicle/model/Consultation.java" />
              <option name="originalContent" value="package org.platform_expertise_medicle.model;&#10;&#10;import jakarta.persistence.*;&#10;import org.platform_expertise_medicle.enums.StatutConsultation;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;consultations&quot;)&#10;public class Consultation {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private long id;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;patient_id&quot;, nullable = false)&#10;    private Patient patient;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;generaliste_id&quot;)&#10;    private MedecinGeneraliste generaliste;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;specialiste_id&quot;)&#10;    private MedecinSpecialiste medecinSpecialiste;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String symptomes;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String diagnostic;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String prescription;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String motif;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String observations;&#10;&#10;    @Column(nullable = false)&#10;    private String priorite = &quot;Normale&quot;;&#10;&#10;    private LocalDateTime dateConsultation;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private StatutConsultation statut;&#10;&#10;    @OneToMany(mappedBy = &quot;consultation&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)&#10;    private List&lt;ActeTechnique&gt; actesTechniques = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;consultation&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;DemandeExpertise&gt; demandesExpertise = new ArrayList&lt;&gt;();&#10;&#10;    public Consultation() {&#10;        this.dateConsultation = LocalDateTime.now();&#10;        this.statut = StatutConsultation.EN_COURS;&#10;    }&#10;&#10;    public long getId() { return id; }&#10;    public void setId(long id) { this.id = id; }&#10;&#10;    public Patient getPatient() { return patient; }&#10;    public void setPatient(Patient patient) { this.patient = patient; }&#10;&#10;    public MedecinGeneraliste getGeneraliste() { return generaliste; }&#10;    public void setGeneraliste(MedecinGeneraliste generaliste) { this.generaliste = generaliste; }&#10;&#10;    public MedecinSpecialiste getMedecinSpecialiste() { return medecinSpecialiste; }&#10;    public void setMedecinSpecialiste(MedecinSpecialiste medecinSpecialiste) { this.medecinSpecialiste = medecinSpecialiste; }&#10;&#10;    public String getSymptomes() { return symptomes; }&#10;    public void setSymptomes(String symptomes) { this.symptomes = symptomes; }&#10;&#10;    public String getDiagnostic() { return diagnostic; }&#10;    public void setDiagnostic(String diagnostic) { this.diagnostic = diagnostic; }&#10;&#10;    public String getPrescription() { return prescription; }&#10;    public void setPrescription(String prescription) { this.prescription = prescription; }&#10;&#10;    public String getMotif() { return motif; }&#10;    public void setMotif(String motif) { this.motif = motif; }&#10;&#10;    public String getObservations() { return observations; }&#10;    public void setObservations(String observations) { this.observations = observations; }&#10;&#10;    public LocalDateTime getDateConsultation() { return dateConsultation; }&#10;    public void setDateConsultation(LocalDateTime dateConsultation) { this.dateConsultation = dateConsultation; }&#10;&#10;    public StatutConsultation getStatut() {&#10;        return statut;&#10;    }&#10;&#10;    public void setStatut(StatutConsultation statut) {&#10;        this.statut = statut;&#10;    }&#10;&#10;    public List&lt;ActeTechnique&gt; getActesTechniques() { return actesTechniques; }&#10;&#10;    public void setActesTechniques(List&lt;ActeTechnique&gt; actesTechniques) {&#10;        this.actesTechniques.clear();&#10;        if (actesTechniques != null) {&#10;            actesTechniques.forEach(this::addActeTechnique);&#10;        }&#10;    }&#10;&#10;    public void addActeTechnique(ActeTechnique acte) {&#10;        actesTechniques.add(acte);&#10;        acte.setConsultation(this);&#10;    }&#10;&#10;    public void removeActeTechnique(ActeTechnique acte) {&#10;        actesTechniques.remove(acte);&#10;        acte.setConsultation(null);&#10;    }&#10;&#10;    public String getPriorite() {&#10;        return priorite;&#10;    }&#10;&#10;    public void setPriorite(String priorite) {&#10;        this.priorite = priorite;&#10;    }&#10;&#10;    public List&lt;DemandeExpertise&gt; getDemandesExpertise() {&#10;        return demandesExpertise;&#10;    }&#10;&#10;    public void setDemandesExpertise(List&lt;DemandeExpertise&gt; demandesExpertise) {&#10;        this.demandesExpertise = demandesExpertise;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package org.platform_expertise_medicle.model;&#10;&#10;import jakarta.persistence.*;&#10;import org.platform_expertise_medicle.enums.StatutConsultation;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Entity&#10;@Table(name = &quot;consultations&quot;)&#10;public class Consultation {&#10;&#10;    @Id&#10;    @GeneratedValue(strategy = GenerationType.IDENTITY)&#10;    private long id;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;patient_id&quot;, nullable = false)&#10;    private Patient patient;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;generaliste_id&quot;)&#10;    private MedecinGeneraliste generaliste;&#10;&#10;    @ManyToOne&#10;    @JoinColumn(name = &quot;specialiste_id&quot;)&#10;    private MedecinSpecialiste medecinSpecialiste;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String symptomes;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String diagnostic;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String prescription;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String motif;&#10;&#10;    @Column(columnDefinition = &quot;TEXT&quot;)&#10;    private String observations;&#10;&#10;    @Column(nullable = false)&#10;    private String priorite = &quot;Normale&quot;;&#10;&#10;    private LocalDateTime dateConsultation;&#10;&#10;    @Enumerated(EnumType.STRING)&#10;    private StatutConsultation statut;&#10;&#10;    @OneToMany(mappedBy = &quot;consultation&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)&#10;    private List&lt;ActeTechnique&gt; actesTechniques = new ArrayList&lt;&gt;();&#10;&#10;    @OneToMany(mappedBy = &quot;consultation&quot;, cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.LAZY)&#10;    private List&lt;DemandeExpertise&gt; demandesExpertise = new ArrayList&lt;&gt;();&#10;&#10;    public Consultation() {&#10;        this.dateConsultation = LocalDateTime.now();&#10;        this.statut = StatutConsultation.EN_COURS;&#10;    }&#10;&#10;    public long getId() { return id; }&#10;    public void setId(long id) { this.id = id; }&#10;&#10;    public Patient getPatient() { return patient; }&#10;    public void setPatient(Patient patient) { this.patient = patient; }&#10;&#10;    public MedecinGeneraliste getGeneraliste() { return generaliste; }&#10;    public void setGeneraliste(MedecinGeneraliste generaliste) { this.generaliste = generaliste; }&#10;&#10;    public MedecinSpecialiste getMedecinSpecialiste() { return medecinSpecialiste; }&#10;    public void setMedecinSpecialiste(MedecinSpecialiste medecinSpecialiste) { this.medecinSpecialiste = medecinSpecialiste; }&#10;&#10;    public String getSymptomes() { return symptomes; }&#10;    public void setSymptomes(String symptomes) { this.symptomes = symptomes; }&#10;&#10;    public String getDiagnostic() { return diagnostic; }&#10;    public void setDiagnostic(String diagnostic) { this.diagnostic = diagnostic; }&#10;&#10;    public String getPrescription() { return prescription; }&#10;    public void setPrescription(String prescription) { this.prescription = prescription; }&#10;&#10;    public String getMotif() { return motif; }&#10;    public void setMotif(String motif) { this.motif = motif; }&#10;&#10;    public String getObservations() { return observations; }&#10;    public void setObservations(String observations) { this.observations = observations; }&#10;&#10;    public LocalDateTime getDateConsultation() { return dateConsultation; }&#10;    public void setDateConsultation(LocalDateTime dateConsultation) { this.dateConsultation = dateConsultation; }&#10;&#10;    public StatutConsultation getStatut() {&#10;        return statut;&#10;    }&#10;&#10;    public void setStatut(StatutConsultation statut) {&#10;        this.statut = statut;&#10;    }&#10;&#10;    public List&lt;ActeTechnique&gt; getActesTechniques() { return actesTechniques; }&#10;&#10;    public void setActesTechniques(List&lt;ActeTechnique&gt; actesTechniques) {&#10;        this.actesTechniques.clear();&#10;        if (actesTechniques != null) {&#10;            actesTechniques.forEach(this::addActeTechnique);&#10;        }&#10;    }&#10;&#10;    public void addActeTechnique(ActeTechnique acte) {&#10;        actesTechniques.add(acte);&#10;        acte.setConsultation(this);&#10;    }&#10;&#10;    public void removeActeTechnique(ActeTechnique acte) {&#10;        actesTechniques.remove(acte);&#10;        acte.setConsultation(null);&#10;    }&#10;&#10;    public String getPriorite() {&#10;        return priorite;&#10;    }&#10;&#10;    public void setPriorite(String priorite) {&#10;        this.priorite = priorite;&#10;    }&#10;&#10;    public List&lt;DemandeExpertise&gt; getDemandesExpertise() {&#10;        return demandesExpertise;&#10;    }&#10;&#10;    public void setDemandesExpertise(List&lt;DemandeExpertise&gt; demandesExpertise) {&#10;        this.demandesExpertise = demandesExpertise;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>